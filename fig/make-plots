#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division, print_function

import functools

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as tick


aspect = 1/1.618
resolution = 72.27
columnwidth = 246/resolution
textwidth = 510/resolution
textiny, texsmall, texnormal = 8., 9.25, 10.
offblack = '#262626'

plt.rcdefaults()
plt.rcParams.update({
    'font.family': ['CMU Serif'],
    'font.size': texsmall,
    'legend.fontsize': 8.5,
    'axes.labelsize': texsmall,
    'axes.titlesize': texsmall,
    'xtick.labelsize': textiny,
    'ytick.labelsize': textiny,
    'lines.linewidth': .9,
    'patch.linewidth': .9,
    'axes.linewidth': .5,
    'text.color': offblack,
    'axes.edgecolor': offblack,
    'axes.labelcolor': offblack,
    'xtick.color': offblack,
    'ytick.color': offblack,
    'xtick.major.size': 2,
    'ytick.major.size': 2,
    'xtick.major.pad': 1.8,
    'ytick.major.pad': 1.8,
    'legend.numpoints': 1,
    'legend.scatterpoints': 1,
    'legend.frameon': False,
    'pdf.fonttype': 42
})


def plotfn(f):
    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        print(f.__name__)
        f(*args, **kwargs)
        plt.savefig('{}.pdf'.format(f.__name__))
        plt.close()
    return wrapper


def despine(ax=None):
    if ax is None:
        ax = plt.gca()
    for spine in 'top', 'right':
        ax.spines[spine].set_visible(False)
    ax.xaxis.set_ticks_position('bottom')
    ax.yaxis.set_ticks_position('left')


def remove_ticks(ax=None):
    if ax is None:
        ax = plt.gca()
    for ax_name in 'xaxis', 'yaxis':
        getattr(ax, ax_name).set_ticks_position('none')


@plotfn
def saturation():
    plt.figure(figsize=(columnwidth, .9*columnwidth*aspect))

    A = np.linspace(0, 5, 1000)
    B = np.ones_like(A)

    means = (
        ((A+B)/2, 1, 'Arithmetic'),
        (np.sqrt(A*B), 0, 'Geometric'),
        (2*A*B/(A+B), -1, 'Harmonic')
    )

    plt.rc('axes', color_cycle=('#4c72b0', '#55a868', '#c44e52'))

    for M, p, name in means:
        plt.plot(A, M, label='{}: $p = {}$'.format(name, p))

    plt.xlabel('$a$')
    plt.ylabel('$M_p(a, 1)$')
    plt.xticks(range(6))
    plt.yticks(range(4))
    plt.gca().set_aspect('equal')
    plt.ylim(0, 2.5)
    plt.legend(loc='best')

    despine()
    remove_ticks()
    plt.tight_layout(pad=0)


def load_from_cache(fn, unpack=False, usecols=None):
    try:
        return np.load(fn + '.npy')
    except IOError:
        arr = np.loadtxt(fn + '.dat', unpack=unpack, usecols=usecols)
        np.save(fn + '.npy', arr)
        return arr


experiment = 'ALICE'


@plotfn
def multdist():
    systems = 'pp', 'pPb', 'PbPb'
    energies = 2.36, 5.02, 2.76
    fig, axes = plt.subplots(ncols=len(systems),
                             figsize=(textwidth, textwidth*aspect/2))

    ax = axes[0]
    system = systems[0]

    for ax, system, energy in zip(axes, systems, energies):
        ax.set_yscale('log')

        mult = load_from_cache(
            'data/trento/multdist/{}-m0-k0.8-w0.6'.format(system),
            usecols=(3,)
        )

        label = '{} {} TeV'.format(experiment, energy)

        if system == 'pp':
            x, y, stat, sys = load_from_cache(
                'data/exp/{}-{}-multdist'.format(experiment, system),
                usecols=(0, 3, 4, 6)
            )[1:].T
            ax.errorbar(x, y, yerr=stat, fmt='o', markersize=2,
                        markeredgewidth=0, capsize=0, elinewidth=.4,
                        color='.3',
                        label=label
                        )

            norm = (np.inner(x, y) / y.sum()) / mult.mean()
            mult_rescaled = norm*mult
            counts, edges = np.histogram(
                mult_rescaled,
                bins=np.arange(np.max(mult_rescaled)+1),
                density=True
            )
            ax.step(edges[:-1], counts, where='post', color='#927CCF',
                    label=r'TRENTO $\kappa = {:.3f}$'.format(norm))

            ax.set_xlim(xmax=52)
            ax.set_ylim(ymin=.45*y.min())

            ax.annotate(r'$|\eta| < 1$, $p_T$ corrected',
                        (.145, .035), xycoords='axes fraction',
                        ha='left', va='bottom')
        else:
            xmin, xmax, x, y = load_from_cache(
                'data/exp/{}-{}-multdist'.format(experiment, system),
                usecols=range(4), unpack=True
            )
            w = xmax - xmin
            z = y/w
            ax.errorbar(x, z, yerr=.06*z, xerr=.035*x,
                        fmt='o', markersize=2, markeredgewidth=0,
                        capsize=0, elinewidth=.4, color='.3',
                        label=label)

            norm = (27.5 if system == 'pPb' else 720.) / mult.mean()
            mult_rescaled = norm*mult
            counts, edges = np.histogram(mult_rescaled, bins=40, density=True)
            ax.step(edges[:-1], 1.22*counts, where='post', color='#927CCF',
                    label=r'TRENTO $\kappa = {:.3f}$'.format(norm))

            if system == 'pPb':
                ax.set_xlim(0, 200)

            ax.annotate(r'$|\eta| < 1$, $0.2 < p_T < 3.0$ GeV',
                        (.145, .035), xycoords='axes fraction',
                        ha='left', va='bottom')

        ax.xaxis.set_major_locator(tick.MaxNLocator(4, prune='upper'))
        ax.yaxis.set_major_locator(
            tick.LogLocator(base=10 if system == 'pp' else 100)
        )
        ax.set_xlabel(r'$N_\mathrm{ch}$')
        if ax.is_first_col():
            ax.set_ylabel(r'$P(N_\mathrm{ch})$')
        ax.set_title(system, x=.5, y=.9)

        despine(ax)
        ax.minorticks_off()
        ax.legend(loc=(.02, .12), handlelength=1)

    plt.tight_layout(pad=0, w_pad=.1)


@plotfn
def uranium():
    plt.figure(figsize=(columnwidth, columnwidth*aspect))

    for label, fn, plotcolor in ('generalized mean: $p=0$','UU-m0-k0.8-w0.5-central','#ECB350'),('two-component: $\\alpha=0.14$','UU-alpha0.14-central','#5E9AEC'):

        e2 = load_from_cache(
            'data/trento/uranium/'+fn,
            usecols=(4,)
        )

        bins = 10
        fraction = 0.15

        e2 = e2[:fraction*e2.size].reshape((bins,-1))
        centrality = np.linspace(0,0.0054705,bins+1)*100
        middles = 0.5*(centrality[1:]+centrality[:-1])
        e2avg = e2.mean(axis=1)
        e2err = e2.std(axis=1)/np.sqrt(e2.shape[1])

        plt.plot(middles, e2avg, "-", color=plotcolor, label=label, linewidth=1.5)
        plt.fill_between(middles, e2avg+2*e2err, e2avg-2*e2err, facecolor=plotcolor, alpha=0.3, edgecolor="none")
    plt.legend(loc='best')
    plt.ylabel("$\epsilon_2$")
    plt.xlabel("centrality $\%$")
    plt.yticks([0.12,0.13,0.14])
    plt.xlim([0,0.5])
    despine()
    plt.tight_layout(pad=0.05)

#@plotfn
#def eccentricity():
#    plt.figure(figsize=(columnwidth, columnwidth*aspect))

#    for label, fn, plotcolor in 
#        e2 = load_from_cache(
#            'data/trento/eccentricity'+fn,
#            usecols=(4,)
#        )

#        bins = 20
#        e2 = e2.reshape((bins,-1))
#        centrality = np.linspace(0,1,bins+1)*100
#        middles = 0.5*(centrality[1:]+centrality[:-1])
#        e2avg = e2.mean(axis=1)
#        e2err = e2.std(axis=1)/np.sqrt(e2.shape[1])

#        plt.plot(middles, e2avg, "-", color=plotcolor, label=label, linewidth=1.0)
#        plt.fill_between(middles, e2avg+2*e2err, e2avg-2*e2err, facecolor=plotcolor, alpha=0.3, edgecolor="none")

#    plt.legend(loc='best')
#    plt.ylabel("$\epsilon_2$")
#    plt.xlabel("centrality $\%$")
#    plt.yticks([0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7])
#    plt.xlim([0,100])
#    despine()
#    plt.tight_layout(pad=0.05)
        
if __name__ == "__main__":
    saturation()
    multdist()
    uranium()
    #eccentricity()
