#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division, print_function, unicode_literals

import functools
import sys

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as tick
from scipy import stats

aspect = 1/1.618
resolution = 72.27
columnwidth = 246/resolution
textwidth = 510/resolution
textiny, texsmall, texnormal = 8., 9.25, 10.
offblack = '#262626'

plt.rcdefaults()
plt.rcParams.update({
    'font.family': ['CMU Serif'],
    'font.size': texsmall,
    'legend.fontsize': 8.5,
    'axes.labelsize': texsmall,
    'axes.titlesize': texsmall,
    'xtick.labelsize': textiny,
    'ytick.labelsize': textiny,
    'lines.linewidth': .9,
    'patch.linewidth': .9,
    'axes.linewidth': .5,
    'text.color': offblack,
    'axes.edgecolor': offblack,
    'axes.labelcolor': offblack,
    'xtick.color': offblack,
    'ytick.color': offblack,
    'xtick.major.size': 2,
    'ytick.major.size': 2,
    'xtick.major.pad': 1.8,
    'ytick.major.pad': 1.8,
    'legend.numpoints': 1,
    'legend.scatterpoints': 1,
    'legend.frameon': False,
    'pdf.fonttype': 42
})

pmean_cmaps = {1: plt.cm.Greens, 0: plt.cm.Blues, -1: plt.cm.Oranges}

pmean_labels = {
    p: '{}: $p = {}$'.format(name, p) for (p, name) in (
        (1, 'Arithmetic'),
        (0, 'Geometric'),
        (-1, 'Harmonic')
    )
}

plotfns = {}


def plotfn(f):
    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        print(f.__name__)
        f(*args, **kwargs)
        plt.savefig('{}.pdf'.format(f.__name__))
        plt.close()

    plotfns[f.__name__] = wrapper

    return wrapper


def despine(ax=None, remove_ticks=False):
    if ax is None:
        ax = plt.gca()
    for spine in 'top', 'right':
        ax.spines[spine].set_visible(False)
    if remove_ticks:
        for ax_name in 'xaxis', 'yaxis':
            getattr(ax, ax_name).set_ticks_position('none')
    else:
        ax.xaxis.set_ticks_position('bottom')
        ax.yaxis.set_ticks_position('left')


@plotfn
def reduced_thickness():
    fig = plt.figure(figsize=(columnwidth, columnwidth*aspect))
    ax = fig.gca()

    def gaussian(x, sigma):
        return np.exp(-.5*x*x/(sigma*sigma))

    X = np.linspace(-2.2, 2.2, 1000)

    width = 0.6
    b = width
    A = gaussian(X - b, width)
    B = gaussian(X + b, width)

    means = (
        ((A+B)/2, 1),
        (np.sqrt(A*B), 0),
        (2*A*B/(A+B), -1)
    )

    for M, p in means:
        plt.plot(X, M, color=pmean_cmaps[p](0.7), label=pmean_labels[p])

    norm = 0.3
    kwargs = dict(lw=.6, dashes=(5, 3), color='.4', zorder=-1)
    ax.plot(X, norm*A, **kwargs)
    ax.plot(X, norm*B, label=r'Participant$\times$ {}'.format(norm), **kwargs)

    ax.set_xlim(X.min(), X.max())
    ax.set_ylim(0, 1)

    ax.set_xlabel('$x$ [fm]')
    ax.set_ylabel('Thickness [fm$^{-2}$]')

    plt.legend(loc=(.02, .60), handlelength=1.5)

    despine(ax, remove_ticks=True)
    plt.tight_layout(pad=0)


def _load_exp_nch(projectiles):
    """
    Load experimental Nch data and return a tuple:

    nch_bin_mids, nch_bin_edges, p(nch), nch_err, p(nch)_err

    """

    data = np.loadtxt('data/exp/nch_{}_alice.dat'.format(''.join(projectiles)))

    if projectiles == ('p', 'p'):
        x, xlow, xhigh, y, yerr, _, _, _ = data[1:].T
        assert np.allclose(xlow[1:], xhigh[:-1])
        bins = np.append(xlow, xhigh[-1])
        return x, bins, y, None, yerr
    else:
        uncorr_low, uncorr_high, x, y, _ = data.T
        xmids = (x[1:] + x[:-1])/2
        first_low = x[0] - (xmids[0] - x[0])
        last_high = x[-1] + (x[-1] - xmids[-1])
        bins = np.concatenate(([first_low], xmids, [last_high]))
        y /= (uncorr_high - uncorr_low)
        xerr = .06*x
        yerr = (.01 if projectiles == ('Pb', 'Pb') else .035)*y
        return x, bins, y, xerr, yerr


def _load_trento_mult(projectiles, p, k):
    """
    Load trento multiplicitly data for the given projectiles and parameters.

    """
    return np.load('data/trento/{}_p{}_k{}.npy'
                   .format(''.join(projectiles), p, k))[:, 2]


def _normalize(mult, mean, low, high):
    """
    Normalize trento multiplicity data to have the given mean within the given
    range (low, high).

    """
    def compute_trento_mean():
        return mult[(mult > low) & (mult < high)].mean()

    norm = 10.
    mult *= norm
    trento_mean = compute_trento_mean()

    while abs((trento_mean - mean)/mean) > 1e-4:
        _norm = mean / trento_mean
        norm *= _norm
        mult *= _norm
        trento_mean = compute_trento_mean()

    return norm


def _fluctuate(mult):
    """
    Fluctuate avg multiplicity with a Poisson.

    """
    return np.array([np.random.poisson(m) for m in mult])


@plotfn
def nch():
    systems = (
        (('p',  'p'),  51,   .97,
         'ALICE 2.36 TeV NSD\n$|\\eta| < 1$, $p_T$ corrected'),
        (('p',  'Pb'), 200,  .92,
         'ALICE 5.02 TeV\n$|\\eta| < 1$, $0.2 < p_T < 3.0$ GeV'),
        (('Pb', 'Pb'), 3500, .96,
         'ALICE 2.76 TeV\n$|\\eta| < 1$, $0.2 < p_T < 3.0$ GeV'),
    )

    fig, axes = plt.subplots(ncols=len(systems),
                             figsize=(textwidth, .5*aspect*textwidth))

    for ax, (projectiles, xmax, mean_factor, label) in zip(axes, systems):
        pp = (projectiles == ('p', 'p'))
        pPb = (projectiles == ('p', 'Pb'))
        PbPb = (projectiles == ('Pb', 'Pb'))

        ax.set_yscale('log')
        x, bins, y, xerr, yerr = _load_exp_nch(projectiles)
        weights = y*np.diff(bins)
        exp_mean = mean_factor * np.average(x, weights=weights)
        exp_low = bins[0]
        exp_high = bins[-1]

        for log10offset, (p, k, fmt, ms) in enumerate(
                [(1, 0.8, 'o', 2.2), (0, 1.4, 's', 2), (-1, 2.2, '^', 2.5)]):
            if not pp:
                log10offset *= 2
            offset = 10**log10offset

            ax.errorbar(x, offset*y, xerr=xerr, yerr=offset*yerr,
                        fmt=fmt, markersize=ms, markeredgewidth=0,
                        capsize=0, elinewidth=.4, color='.3',
                        zorder=10, label='$\\times 10^{}$'.format(log10offset))

            if PbPb and p == -1:
                last_bin_width = bins[-1] - bins[-2]
                bins = np.append(
                    bins, bins[-1] + np.arange(1, 3)*last_bin_width)

            def mult_norm_counts(k_):
                mult = _load_trento_mult(projectiles, p, k_)
                norm = _normalize(mult, exp_mean, exp_low, exp_high)
                counts = np.histogram(_fluctuate(mult), bins=bins,
                                      density=True)[0]
                return mult, norm, counts

            mult, norm, counts = mult_norm_counts(k)
            print(p, k, ''.join(projectiles), '{:.3f}'.format(norm))

            # repeat the first bin count just so the step plot looks right
            # (not actually changing the data)
            counts = np.insert(counts, 0, counts[0])
            ax.step(bins, offset*weights.sum()*counts, where='pre',
                    color=pmean_cmaps[p](0.7), zorder=0)

            # plot k bands
            counts_low = mult_norm_counts(round(1.3*k, 2))[2]
            counts_high = mult_norm_counts(round(0.7*k, 2))[2]

            fill_edges = np.repeat(bins, 2)[1:-1]
            fill_low = np.repeat(offset*weights.sum()*counts_low, 2)
            fill_high = np.repeat(offset*weights.sum()*counts_high, 2)
            ax.fill_between(fill_edges, fill_low, fill_high,
                            color=pmean_cmaps[p](.2), lw=0, zorder=-10)

            if PbPb:
                xfactor = .06
                yfactor = 1.2
            else:
                xfactor = .03
                yfactor = 0.5 if pp else 0.3
                if p == -1:
                    yfactor *= .8

            ax.annotate('$p = {}$'.format(p),
                        (xfactor*xmax, yfactor*offset*counts[0]),
                        fontsize=texsmall, ha='left', va='top')

        ax.set_xlabel(r'$N_\mathrm{ch}$')
        if ax.is_first_col():
            ax.set_ylabel(r'$P(N_\mathrm{ch})$')
        ax.set_title('+'.join(projectiles), x=.5, y=.9)

        if pp:
            ax.set_xticks(np.arange(0, 51, 10))
        elif pPb:
            ax.set_xticks(np.arange(0, 201, 50))
        elif PbPb:
            ax.set_xticks(np.arange(0, 3001, 1000))
        ax.yaxis.set_major_locator(
            tick.LogLocator(base=10 if pp else 100))
        ax.set_xlim(0, xmax)
        ax.set_ylim(ymin=y.min()/np.log10(y.max()/y.min()))

        ax.annotate(label, (.04, .03), xycoords='axes fraction',
                    ha='left', va='bottom')

        handles, labels = ax.get_legend_handles_labels()
        ax.legend([h[0] for h in handles[::-1]], labels[::-1],
                  loc='upper right',
                  bbox_to_anchor=(1.05, 1.10 if PbPb else 1.00),
                  labelspacing=.2, handletextpad=-.5)

        despine(ax)
        ax.minorticks_off()

    fig.tight_layout(pad=0, w_pad=.1)


@plotfn
def uranium():
    plot_cents = 0.001, 0.01
    bins = 20
    bin_range = .85, 1.15

    projectiles = ('U', 'U'), ('Au', 'Au')
    p, k = 0, 1.4

    #              UU 0.125% 1%     AuAu 0.125% 1%
    glb_slopes = (-0.270, -0.145), (0.0296, 0.0106)
    glb_color = '.6'

    fig, axes = plt.subplots(nrows=2, sharex='col',
                             figsize=(columnwidth, columnwidth*aspect*1.75))

    for proj, gslopes in zip(projectiles, glb_slopes):
        # load data for mininum bias and impact parameter cut
        # columns: impact npart mult e2
        minbias, bcut = (
            np.load('data/trento/{}_p{}_k{}_{}.npy'
                    .format(''.join(proj), p, k, suffix))
            for suffix in ('minbias', 'bmax3')
        )

        # find centrality cut for b < 3.
        impact = minbias[:, 0]
        cent_cut = np.count_nonzero(impact < 3.) / impact.size

        # sort by npart and select mult, e2 columns
        minbias = minbias[minbias[:, 1].argsort()][::-1, 2:4]
        bcut = bcut[bcut[:, 1].argsort()][::-1, 2:4]

        for ax, cent, gslope in zip(axes, plot_cents, gslopes):
            Nminbias = int(minbias.shape[0] * cent)
            Nbcut = int(bcut.shape[0] * cent / cent_cut)
            mult, e2 = np.concatenate((minbias[:Nminbias], bcut[:Nbcut])).T
            mult /= mult.mean()

            counts, edges = np.histogram(mult, bins, range=bin_range)
            counts[counts == 0] = 1
            e2avg = np.histogram(mult, bins=edges, weights=e2)[0] / counts
            e2err = np.sqrt(
                np.histogram(mult, bins=edges, weights=e2*e2)[0]
            ) / counts
            middles = (edges[1:] + edges[:-1])/2
            ax.errorbar(middles, e2avg, yerr=e2err,
                        fmt='o', ms=3.5, color=pmean_cmaps[p](0.8),
                        markeredgecolor='none', capsize=0)

            cut = (mult > 0.9) & (mult < 1.1)
            slope, intercept = stats.linregress(mult[cut], e2[cut])[:2]
            X = np.linspace(.9, 1.1, 200)
            trentoline = ax.plot(X, slope*X + intercept,
                                 color=pmean_cmaps[p](0.7))[0]

            gintercept = slope*1 + intercept - gslope
            glbline = ax.plot(X, gslope*X + gintercept, color=glb_color)[0]

    for ax, cent_max in zip(axes, plot_cents):
        ax.set_xlim(bin_range)
        if ax.is_last_row():
            ax.set_xticks(np.r_[.9:1.1:3j])
            ax.set_xlabel(r'$N_\mathrm{ch}/\langle N_\mathrm{ch} \rangle$')

        ax.set_ylim([0.04, 0.20])
        ax.set_yticks((.06, .12, .18))
        ax.set_ylabel(r'$\varepsilon_2$')
        if ax.is_first_row():
            UU_text_y = .135
            AuAu_text_y = .085
        else:
            UU_text_y = .134
            AuAu_text_y = .088
        ax.text(.9, UU_text_y, 'U+U', ha='left', va='top')
        ax.text(.9, AuAu_text_y, 'Au+Au', ha='left', va='bottom')
        ax.annotate('0–{:g}% spectators'.format(round(100*cent_max, 1)),
                    (.5, .05), xycoords='axes fraction',
                    ha='center', va='bottom')
        despine(ax)

    axes[0].legend((trentoline, glbline), ('TRENTO', 'Glauber+NBD'),
                   loc=(.50, .75), ncol=1,
                   handlelength=1.3, columnspacing=1.2)

    plt.tight_layout(pad=0)


def _load_ecc(p, k, bins):
    """
    Load trento eccentricity data and bin by centrality.

    """
    data = np.load('data/trento/PbPb_p{}_k{}.npy'.format(p, k))
    order = np.argsort(data[:, 2])[::-1]
    eccentricity = data[order].T[3:5].reshape(2, bins, -1)

    return eccentricity


@plotfn
def eccentricity():
    fig, axes = plt.subplots(ncols=3,
                             figsize=(textwidth, .40*aspect*textwidth))

    e2_ax, e3_ax, ratio_ax = axes
    lw = .6
    alpha = .4

    bins = 20
    cent_mid = np.linspace(0, 100, bins, endpoint=False) + 50/bins

    for p, k in (1, 0.8), (0, 1.4), (-1, 2.2):
        color = pmean_cmaps[p](.7)
        label = pmean_labels[p]

        ecc_mid = _load_ecc(p, k, bins)
        ecc_low = _load_ecc(p, round(1.3*k, 2), bins)
        ecc_high = _load_ecc(p, round(0.7*k, 2), bins)

        for n, (ax, ecc_m, ecc_l, ecc_h) in enumerate(
                zip(axes, ecc_mid, ecc_low, ecc_high), start=2):
            ax.plot(cent_mid, ecc_m.mean(axis=1), color=color, label=label,
                    lw=lw)
            ax.fill_between(cent_mid, ecc_l.mean(axis=1), ecc_h.mean(axis=1),
                            lw=0, color=color, alpha=alpha)
            ax.set_ylim(0, .62)
            if n == 2:
                ymax = .6
                label_pos = .08, .87
                ax.set_ylabel(r'$\varepsilon_n$')
            else:
                ymax = .6
                label_pos = .08, .52
                ax.legend(loc='upper left', bbox_to_anchor=(.03, 1.1),
                          fontsize=8, labelspacing=.33)
            ax.set_yticks(np.arange(0, ymax+.01, .2))
            ax.spines['left'].set_bounds(0, ymax)
            ax.annotate(r'$\varepsilon_{}$'.format(n), label_pos, size=10,
                        xycoords='axes fraction', ha='left', va='top')

        def ecc_ratio(ecc):
            ecc_rms = np.sqrt(np.mean(np.square(ecc), axis=-1))
            return ecc_rms[0] / ecc_rms[1]**0.6

        ratio_ax.plot(cent_mid, ecc_ratio(ecc_mid), color=color, lw=lw)

        ratio_ax.fill_between(
            cent_mid, ecc_ratio(ecc_low), ecc_ratio(ecc_high),
            lw=0, color=color, alpha=alpha)

    ratio_data = np.loadtxt('data/exp/eccentricity_ratio.dat').T
    cent_mid = ratio_data[:2].mean(axis=0)
    ratio_min, ratio_max = ratio_data[2:4]

    ratio_ax.fill_between(cent_mid, ratio_min, ratio_max,
                          color='.5', lw=0, alpha=0.3, zorder=-1)

    glasma = ratio_data[9]
    glasma_line,  = ratio_ax.plot(cent_mid, glasma, 'o',
                                mew=lw, mec=offblack, mfc='none', ms=4)

    ratio_ax.set_xlim(0, 40)
    ratio_ax.set_ylim(.3, 1.2)
    ratio_ax.set_yticks((.3, .6, .9, 1.2))
    ratio_ax.annotate('Ratio', (.08, .87), xycoords='axes fraction',
                      ha='left', va='top')
    ratio_ax.legend([glasma_line], ['IP-Glasma'], loc='lower right',
                    handletextpad=.1)

    for ax in axes:
        ax.xaxis.set_major_locator(tick.MaxNLocator(4))
        ax.set_xlabel('Centrality %')
        despine(ax)

    plt.tight_layout(pad=.01, w_pad=.5)


def main():
    if len(sys.argv) > 1:
        for a in sys.argv[1:]:
            if a.endswith('.pdf'):
                a = a[:-4]
            plotfns[a]()
    else:
        for fn in plotfns.values():
            fn()


if __name__ == "__main__":
    main()
