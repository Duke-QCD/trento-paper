#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division, print_function

import functools

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as tick
from scipy import optimize

aspect = 1/1.618
resolution = 72.27
columnwidth = 246/resolution
textwidth = 510/resolution
textiny, texsmall, texnormal = 8., 9.25, 10.
offblack = '#262626'

plt.rcdefaults()
plt.rcParams.update({
    'font.family': ['CMU Serif'],
    'font.size': texsmall,
    'legend.fontsize': 8.5,
    'axes.labelsize': texsmall,
    'axes.titlesize': texsmall,
    'xtick.labelsize': textiny,
    'ytick.labelsize': textiny,
    'lines.linewidth': .9,
    'patch.linewidth': .9,
    'axes.linewidth': .5,
    'text.color': offblack,
    'axes.edgecolor': offblack,
    'axes.labelcolor': offblack,
    'xtick.color': offblack,
    'ytick.color': offblack,
    'xtick.major.size': 2,
    'ytick.major.size': 2,
    'xtick.major.pad': 1.8,
    'ytick.major.pad': 1.8,
    'legend.numpoints': 1,
    'legend.scatterpoints': 1,
    'legend.frameon': False,
    'pdf.fonttype': 42
})


def plotfn(f):
    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        print(f.__name__)
        f(*args, **kwargs)
        plt.savefig('{}.pdf'.format(f.__name__))
        plt.close()
    return wrapper


def despine(ax=None, remove_ticks=False):
    if ax is None:
        ax = plt.gca()
    for spine in 'top', 'right':
        ax.spines[spine].set_visible(False)
    if remove_ticks:
        for ax_name in 'xaxis', 'yaxis':
            getattr(ax, ax_name).set_ticks_position('none')
    else:
        ax.xaxis.set_ticks_position('bottom')
        ax.yaxis.set_ticks_position('left')


@plotfn
def saturation():
    plt.figure(figsize=(columnwidth, .9*columnwidth*aspect))

    A = np.linspace(0, 5, 1000)
    B = np.ones_like(A)

    means = (
        ((A+B)/2, 1, 'Arithmetic'),
        (np.sqrt(A*B), 0, 'Geometric'),
        (2*A*B/(A+B), -1, 'Harmonic')
    )

    plt.rc('axes', color_cycle=('#4c72b0', '#55a868', '#c44e52'))

    for M, p, name in means:
        plt.plot(A, M, label='{}: $p = {}$'.format(name, p))

    plt.xlabel('$a$')
    plt.ylabel('$M_p(a, 1)$')
    plt.xticks(range(6))
    plt.yticks(range(4))
    plt.gca().set_aspect('equal')
    plt.ylim(0, 2.5)
    plt.legend(loc='best')

    despine(remove_ticks=True)
    plt.tight_layout(pad=0)


def load_from_cache(fn, unpack=False, usecols=None):
    try:
        return np.load(fn + '.npy')
    except IOError:
        arr = np.loadtxt(fn + '.dat', unpack=unpack, usecols=usecols)
        np.save(fn + '.npy', arr)
        return arr


experiment = 'ALICE'


@plotfn
def multdist():
    systems = 'pp', 'pPb', 'PbPb'
    energies = 2.36, 5.02, 2.76
    fig, axes = plt.subplots(ncols=len(systems),
                             figsize=(textwidth, textwidth*aspect/2))

    for ax, system, energy in zip(axes, systems, energies):
        ax.set_yscale('log')

        mult = load_from_cache(
            'data/trento/multdist/{}-m0-k0.8-w0.6'.format(system),
            usecols=(3,)
        )

        label = '{} {} TeV'.format(experiment, energy)

        if system == 'pp':
            x, y, stat, sys = load_from_cache(
                'data/exp/{}-{}-multdist'.format(experiment, system),
                usecols=(0, 3, 4, 6)
            )[1:].T
            ax.errorbar(x, y, yerr=stat, fmt='o', markersize=2,
                        markeredgewidth=0, capsize=0, elinewidth=.4,
                        color='.3',
                        label=label
                        )

            norm = (np.inner(x, y) / y.sum()) / mult.mean()
            mult_rescaled = norm*mult
            counts, edges = np.histogram(
                mult_rescaled,
                bins=np.arange(np.max(mult_rescaled)+1),
                density=True
            )
            ax.step(edges[:-1], counts, where='post', color='#55a868',
                    label=r'TRENTO $\kappa = {:.3f}$'.format(norm))

            ax.set_xlim(xmax=52)
            ax.set_ylim(ymin=.45*y.min())

            ax.annotate(r'$|\eta| < 1$, $p_T$ corrected',
                        (.145, .035), xycoords='axes fraction',
                        ha='left', va='bottom')
        else:
            xmin, xmax, x, y = load_from_cache(
                'data/exp/{}-{}-multdist'.format(experiment, system),
                usecols=range(4), unpack=True
            )
            w = xmax - xmin
            z = y/w
            ax.errorbar(x, z, yerr=.06*z, xerr=.035*x,
                        fmt='o', markersize=2, markeredgewidth=0,
                        capsize=0, elinewidth=.4, color='.3',
                        label=label)

            norm = (27.5 if system == 'pPb' else 720.) / mult.mean()
            mult_rescaled = norm*mult
            counts, edges = np.histogram(mult_rescaled, bins=40, density=True)
            ax.step(edges[:-1], 1.22*counts, where='post', color='#55a868',
                    label=r'TRENTO $\kappa = {:.3f}$'.format(norm))

            if system == 'pPb':
                ax.set_xlim(0, 200)

            ax.annotate(r'$|\eta| < 1$, $0.2 < p_T < 3.0$ GeV',
                        (.145, .035), xycoords='axes fraction',
                        ha='left', va='bottom')

        ax.xaxis.set_major_locator(tick.MaxNLocator(4, prune='upper'))
        ax.yaxis.set_major_locator(
            tick.LogLocator(base=10 if system == 'pp' else 100)
        )
        ax.set_xlabel(r'$N_\mathrm{ch}$')
        if ax.is_first_col():
            ax.set_ylabel(r'$P(N_\mathrm{ch})$')
        ax.set_title(system, x=.5, y=.9)

        despine(ax)
        ax.minorticks_off()
        ax.legend(loc=(.02, .12), handlelength=1)

    plt.tight_layout(pad=0, w_pad=.1)


@plotfn
def uranium():
    plt.figure(figsize=(columnwidth, columnwidth*aspect))

    systems = 'generalized mean: $p=0$', 'two-component: $\alpha=0.14$'
    files = 'UU-m0-k0.8-w0.5-central', 'UU-alpha0.14-central'
    colors = 'blue', 'orange'
    markers = '^', 'o'

    def func(x, a, b):
        return a + b*x

    for label, fn, color, marker in zip(systems, files, colors, markers):
        data = load_from_cache('data/trento/uranium/' + fn, usecols=(2, 3, 4))
        data = data[data[:, 0].argsort()]
        N = data.shape[0]

        cut = 0.8  # plot data from 0-1% ZDC
        mult = data[cut*N:N, 1]
        e2 = data[cut*N:N, 2]

        z = mult/mult.mean()
        nbins = 25
        n, _ = np.histogram(z, bins=nbins)
        middles = (_[1:] + _[:-1])/2
        v2avg = np.histogram(z, bins=nbins, weights=e2)[0]/(n+1e-8)
        v2err = np.sqrt(
            np.histogram(z, bins=nbins, weights=e2*e2)[0]/(n+1e-8)
        )/np.sqrt(n+1e-8)

        factor = 0.2
        middles_cut = middles[abs(1-middles[:]) < 0.1]
        v2avg_cut = v2avg[abs(1-middles[:]) < 0.1]*factor
        v2err_cut = v2err[abs(1-middles[:]) < 0.1]*factor

        popt, pcov = optimize.curve_fit(
            lambda x, a, b: a + b*x, middles_cut, v2avg_cut,
            p0=None, sigma=v2err_cut
        )
        xvec = np.linspace(0.9, 1.1, 1000)

        # scatter plot the data
        plt.plot(xvec, popt[0] + popt[1]*xvec, '-', color=color)
        plt.errorbar(middles_cut, v2avg_cut, yerr=v2err_cut, color=color,
                     linestyle='none', marker=marker, markeredgecolor='none',
                     capsize=0)

    # plt.legend(loc='best')
    plt.xlim([0.8, 1.2])
    plt.ylim([0.015, 0.035])
    plt.yticks(np.arange(.016, .033, .04))
    plt.xlabel(r'$\mathrm{mult}/\langle \mathrm{mult} \rangle$')
    plt.ylabel(r'$\epsilon_2$')

    despine()
    plt.tight_layout(pad=0.05)


@plotfn
def eccentricity():
    systems = '$p=1$', '$p=0$', '$p=1$'
    files = ('PbPb_m=-1_k=0.8_w=0.6',
             'PbPb_m=0_k=0.8_w=0.6',
             'PbPb_m=1_k=0.8_w=0.6')
    colors = '#4c72b0', '#55a868', '#c44e52'

    fig, axes = plt.subplots(nrows=3,
                             figsize=(columnwidth, columnwidth*aspect*1.5))

    for label, fn, color in zip(systems, files, colors):
        e2, e3 = load_from_cache('data/trento/eccentricity/'+fn,
                                 usecols=(4, 5), unpack=True)

        cmin, cmax, expmin, expmax = load_from_cache(
            'data/exp/ratio', usecols=(0, 1, 2, 3), unpack=True
        )

        bins = 20
        e2 = e2.reshape(bins, -1)
        e3 = e3.reshape(bins, -1)
        e2rms = np.sqrt(np.mean(np.square(e2), axis=1))
        e3rms = np.sqrt(np.mean(np.square(e3), axis=1))
        centrality = np.linspace(0, 1, bins+1) * 100
        middles = 0.5*(centrality[1:]+centrality[:-1])
        e2avg = e2.mean(axis=1)
        e3avg = e3.mean(axis=1)

        ax = axes[0]
        ax.plot(middles, e2avg, '-', label=label, color=color, linewidth=1.0)
        ax.set_xlim(0, 100)
        ax.set_xticks(np.arange(0, 101, 25))
        ax.set_yticks(np.arange(0, .61, .2))
        ax.set_ylim(0, 0.62)
        ax.set_ylabel(r'$\varepsilon_2$')
        despine(ax)

        ax = axes[1]
        ax.plot(middles, e3avg, '-', label=label, color=color, linewidth=1.0)
        ax.set_xlim(0, 100)
        ax.set_xticks(np.arange(0, 101, 25))
        ax.set_yticks(np.arange(0, .41, .1))
        ax.set_ylim(0, 0.41)
        ax.set_ylabel(r'$\varepsilon_3$')
        despine(ax)

        ax = axes[2]
        ax.plot(middles, e2rms/(e3rms**0.6),
                '-', color=color, linewidth=1.0, label=label)
        ax.fill_between((cmin+cmax)/2, expmin, expmax,
                        facecolor='#927CCF', alpha=0.15, label='ALICE')
        ax.set_xlim(0, 40)
        ax.set_xlabel('Centrality %')
        ax.set_xticks(np.arange(0, 41, 10))
        ax.set_yticks(np.arange(0, 1.21, .4))
        ax.set_ylim(0, 1.25)
        ax.set_ylabel('Ratio')
        despine(ax)

    plt.legend(loc='best', ncol=3)
    plt.tight_layout(pad=0.05,)


if __name__ == "__main__":
    saturation()
    multdist()
    uranium()
    eccentricity()
