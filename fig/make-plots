#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division, print_function

import functools

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as tick
from scipy import stats

aspect = 1/1.618
resolution = 72.27
columnwidth = 246/resolution
textwidth = 510/resolution
textiny, texsmall, texnormal = 8., 9.25, 10.
offblack = '#262626'

plt.rcdefaults()
plt.rcParams.update({
    'font.family': ['CMU Serif'],
    'font.size': texsmall,
    'legend.fontsize': 8.5,
    'axes.labelsize': texsmall,
    'axes.titlesize': texsmall,
    'xtick.labelsize': textiny,
    'ytick.labelsize': textiny,
    'lines.linewidth': .9,
    'patch.linewidth': .9,
    'axes.linewidth': .5,
    'text.color': offblack,
    'axes.edgecolor': offblack,
    'axes.labelcolor': offblack,
    'xtick.color': offblack,
    'ytick.color': offblack,
    'xtick.major.size': 2,
    'ytick.major.size': 2,
    'xtick.major.pad': 1.8,
    'ytick.major.pad': 1.8,
    'legend.numpoints': 1,
    'legend.scatterpoints': 1,
    'legend.frameon': False,
    'pdf.fonttype': 42
})

pmean_colors = {
    1: (0.3333333333333333, 0.6588235294117647, 0.40784313725490196),
    0: (0.2980392156862745, 0.4470588235294118, 0.6901960784313725),
    -1: (0.7686274509803922, 0.3058823529411765, 0.3215686274509804)
}


def plotfn(f):
    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        print(f.__name__)
        f(*args, **kwargs)
        plt.savefig('{}.pdf'.format(f.__name__))
        plt.close()
    return wrapper


def despine(ax=None, remove_ticks=False):
    if ax is None:
        ax = plt.gca()
    for spine in 'top', 'right':
        ax.spines[spine].set_visible(False)
    if remove_ticks:
        for ax_name in 'xaxis', 'yaxis':
            getattr(ax, ax_name).set_ticks_position('none')
    else:
        ax.xaxis.set_ticks_position('bottom')
        ax.yaxis.set_ticks_position('left')


@plotfn
def saturation():
    plt.figure(figsize=(columnwidth, .9*columnwidth*aspect))

    A = np.linspace(0, 5, 1000)
    B = np.ones_like(A)

    means = (
        ((A+B)/2, 1, 'Arithmetic'),
        (np.sqrt(A*B), 0, 'Geometric'),
        (2*A*B/(A+B), -1, 'Harmonic')
    )

    for M, p, name in means:
        plt.plot(A, M, color=pmean_colors[p],
                 label='{}: $p = {}$'.format(name, p))

    plt.xlabel('$T_A$')
    plt.ylabel('$T_R(T_A, 1)$')
    plt.xticks(range(6))
    plt.yticks(range(4))
    plt.gca().set_aspect('equal')
    plt.ylim(0, 2.5)
    plt.legend(loc='best')

    despine(remove_ticks=True)
    plt.tight_layout(pad=0)


def load_from_cache(fn, unpack=False, usecols=None):
    try:
        return np.load(fn + '.npy')
    except IOError:
        arr = np.loadtxt(fn + '.dat', unpack=unpack, usecols=usecols)
        np.save(fn + '.npy', arr)
        return arr


experiment = 'ALICE'


@plotfn
def multdist():
    systems = 'pp', 'pPb', 'PbPb'
    energies = 2.36, 5.02, 2.76
    color = pmean_colors[0]
    fig, axes = plt.subplots(ncols=len(systems),
                             figsize=(textwidth, textwidth*aspect/2))

    for ax, system, energy in zip(axes, systems, energies):
        ax.set_yscale('log')

        mult = load_from_cache(
            'data/trento/multdist/{}-m0-k0.8-w0.6'.format(system),
            usecols=(3,)
        )

        label = '{} {} TeV'.format(experiment, energy)

        if system == 'pp':
            x, y, stat, sys = load_from_cache(
                'data/exp/{}-{}-multdist'.format(experiment, system),
                usecols=(0, 3, 4, 6)
            )[1:].T
            ax.errorbar(x, y, yerr=stat, fmt='o', markersize=2,
                        markeredgewidth=0, capsize=0, elinewidth=.4,
                        color='.3',
                        label=label
                        )

            norm = (np.inner(x, y) / y.sum()) / mult.mean()
            mult_rescaled = norm*mult
            counts, edges = np.histogram(
                mult_rescaled,
                bins=np.arange(np.max(mult_rescaled)+1),
                density=True
            )
            ax.step(edges[:-1], counts, where='post', color=color,
                    label=r'$T_R$, norm = {:.1f}'.format(norm))

            ax.set_xlim(xmax=52)
            ax.set_ylim(ymin=.45*y.min())

            ax.annotate(r'$|\eta| < 1$, $p_T$ corrected',
                        (.145, .035), xycoords='axes fraction',
                        ha='left', va='bottom')
        else:
            xmin, xmax, x, y = load_from_cache(
                'data/exp/{}-{}-multdist'.format(experiment, system),
                usecols=range(4), unpack=True
            )
            w = xmax - xmin
            z = y/w
            ax.errorbar(x, z, xerr=.06*x, yerr=.035*z,
                        fmt='o', markersize=2, markeredgewidth=0,
                        capsize=0, elinewidth=.4, color='.3',
                        label=label)

            norm = (27.5 if system == 'pPb' else 700.) / mult.mean()
            mult_rescaled = norm*mult
            counts, edges = np.histogram(
                mult_rescaled, bins=40 if system == 'pPb' else 100,
                density=True
            )
            ax.step(edges[:-1], 1.22*counts, where='post', color=color,
                    label=r'$T_R$, norm = {:.1f}'.format(norm))

            if system == 'pPb':
                ax.set_xlim(0, 200)
            else:
                ax.set_xlim(0, 3600)
                ax.set_ylim(ymin=.5*z.min())

            ax.annotate(r'$|\eta| < 1$, $0.2 < p_T < 3.0$ GeV',
                        (.145, .035), xycoords='axes fraction',
                        ha='left', va='bottom')

        ax.xaxis.set_major_locator(tick.MaxNLocator(4))
        ax.yaxis.set_major_locator(
            tick.LogLocator(base=10 if system == 'pp' else 100)
        )
        ax.set_xlabel(r'$N_\mathrm{ch}$')
        if ax.is_first_col():
            ax.set_ylabel(r'$P(N_\mathrm{ch})$')
        ax.set_title(system, x=.5, y=.9)

        despine(ax)
        ax.minorticks_off()
        ax.legend(loc=(.02, .12), handlelength=1)

    plt.tight_layout(pad=0, w_pad=.1)


@plotfn
def uranium():
    color = pmean_colors[0]
    linecolor = tuple(.6*i for i in color)
    plot_cents = 0.001, 0.01
    bins = 20
    bin_range = .85, 1.15

    systems = 'UU', 'AuAu'
    system_cent_range = 0.037854, 0.039909

    glb_color = '.6'
    glb_slopes = (-0.526065, -0.263391), (0.064156, 0.039964)

    fig, axes = plt.subplots(nrows=2, sharex='col',
                             figsize=(columnwidth, columnwidth*aspect*1.5))

    for system, cent_range, gslopes in zip(
            systems, system_cent_range, glb_slopes):

        data = load_from_cache(
            'data/trento/uranium/{}_p=0_k=0.7_w=0.5_bcut=3'.format(system),
            usecols=(2, 3, 4)
        )
        data = data[data[:, 0].argsort()][::-1]

        for ax, desired_cent_max, gslope in zip(axes, plot_cents, gslopes):
            N = int(data.shape[0] * desired_cent_max/cent_range)
            mult, e2 = data[:N].T[1:]
            mult = mult/mult.mean()

            counts, edges = np.histogram(mult, bins, range=bin_range)
            counts[counts == 0] = 1
            e2avg = np.histogram(mult, bins=edges, weights=e2)[0] / counts
            e2err = np.sqrt(
                np.histogram(mult, bins=edges, weights=e2*e2)[0]
            ) / counts
            middles = (edges[1:] + edges[:-1])/2
            ax.errorbar(middles, e2avg, yerr=e2err,
                        fmt='o', ms=3.5, color=color,
                        markeredgecolor='none', capsize=0)

            cut = (mult > 0.9) & (mult < 1.1)
            slope, intercept = stats.linregress(mult[cut], e2[cut])[:2]
            X = np.linspace(.9, 1.1, 200)
            trentoline = ax.plot(X, slope*X + intercept, color=linecolor)[0]

            gintercept = slope*1 + intercept - gslope
            glbline = ax.plot(X, gslope*X + gintercept, color=glb_color)[0]

    for ax, cent_max in zip(axes, plot_cents):
        ax.set_xlim(bin_range)
        if ax.is_last_row():
            ax.set_xticks(np.r_[.9:1.1:3j])
            ax.set_xlabel(r'$N_\mathrm{ch}/\langle N_\mathrm{ch} \rangle$')

        ax.set_ylim([0.04, 0.20])
        ax.set_yticks((.06, .12, .18))
        ax.set_ylabel(r'$\varepsilon_2$')
        despine(ax)

    axes[0].legend((trentoline, glbline), ('TRENTO', 'Glauber+NBD'),
                   loc='upper right', ncol=1,
                   handlelength=1.3, columnspacing=1.2)
    # top.legend(loc='best', ncol=3, handlelength=1.3, columnspacing=1.2)

    ax = axes[0]
    ax.annotate('0–0.1% spectators', (.5, .05), xycoords='axes fraction',
                ha='center', va='bottom')
    ax.text(.9, .138, 'U+U', ha='left', va='top')
    ax.text(.9, .088, 'Au+Au', ha='left', va='bottom')

    ax = axes[1]
    ax.annotate('0–1% spectators', (.5, .05), xycoords='axes fraction',
                ha='center', va='bottom')
    ax.text(.9, .136, 'U+U', ha='left', va='top')
    ax.text(.9, .090, 'Au+Au', ha='left', va='bottom')

    plt.tight_layout(pad=0)


@plotfn
def eccentricity():
    plt.figure(figsize=(columnwidth, columnwidth*aspect*1.2))

    top = plt.subplot2grid((3, 1), (0, 0), rowspan=2)
    bottom = plt.subplot2grid((3, 1), (2, 0), rowspan=1)

    bins = 20
    cent_mid = np.linspace(0, 100, bins, endpoint=False) + 50/bins

    for p in 1, 0, -1:
        plabel = '$p = {}$'.format(p)
        color = pmean_colors[p]

        eccentricity = load_from_cache(
            'data/trento/eccentricity/PbPb_m={}_k=0.8_w=0.6'.format(p),
            usecols=(4, 5)
        ).T.reshape(2, bins, -1)

        for ecc, dashes, label in zip(
                eccentricity, ((None, None), (8, 2)), (plabel, None)):
            top.plot(cent_mid, ecc.mean(axis=1),
                     dashes=dashes, color=color, label=label)

        ecc_rms = np.sqrt(np.mean(np.square(eccentricity), axis=-1))
        bottom.plot(cent_mid, ecc_rms[0]/ecc_rms[1]**0.6, color=color)

    ratio_data = load_from_cache('data/exp/eccentricity_ratio',
                                 usecols=(0, 1, 2, 3)).T
    cent_mid = ratio_data[:2].mean(axis=0)
    ratio_min, ratio_max = ratio_data[2:]
    bottom.fill_between(cent_mid, ratio_min, ratio_max,
                        color='.5', edgecolor='none', alpha=0.3, zorder=-1,
                        label='ALICE')

    top.xaxis.set_major_locator(tick.MaxNLocator(4))
    top.yaxis.set_major_locator(tick.MaxNLocator(4, prune='lower'))
    top.set_ylim(0, .62)
    top.set_ylabel(r'$\varepsilon_n$')
    top.legend(loc='best', ncol=3, handlelength=1.3, columnspacing=1.2)
    top.text(35, .34, r'$\varepsilon_2$')
    top.text(55, .21, r'$\varepsilon_3$')
    despine(top)

    bottom.set_xlim(0, 40)
    bottom.xaxis.set_major_locator(tick.MaxNLocator(4))
    bottom.set_xlabel('Centrality %')
    bottom.set_ylim(.3, 1.2)
    bottom.set_yticks((.3, .7, 1.1))
    bottom.set_ylabel('Ratio')
    despine(bottom)

    plt.tight_layout(pad=.05)


if __name__ == "__main__":
    saturation()
    multdist()
    uranium()
    eccentricity()
