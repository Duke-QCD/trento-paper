#!/usr/bin/env python3

import itertools
import multiprocessing.dummy
import subprocess

import numpy as np


p, k = 0, 1.4

default_args = [
    '--reduced-thickness={}'.format(p),
    '--fluctuation={}'.format(k),
    '--nucleon-width=0.6',
    '--cross-section=4.2',
    '--grid-width=18',
    '--grid-steps=90'
]

rhic_systems = ('Au', 'Au'), ('U',  'U')


def run_trento(projectiles, bmax=None):
    if bmax is None:
        number_events = 1e5
        args = []
        suffix = 'minbias'
    else:
        number_events = 1e6
        args = ['--b-max={}'.format(bmax)]
        suffix = 'bmax{}'.format(bmax)

    command = list(itertools.chain(
        ['trento'], projectiles, [str(int(number_events))],
        args, default_args
    ))

    print(*command)

    with subprocess.Popen(command, stdout=subprocess.PIPE) as proc:
        arr = np.array([l.split()[1:] for l in proc.stdout], dtype=float)

    filename = '_'.join([
        ''.join(projectiles),
        'p{}'.format(p),
        'k{}'.format(k),
        suffix
    ])
    np.save(filename, arr)


def main():
    with multiprocessing.dummy.Pool() as pool:
        pool.starmap(
            run_trento,
            itertools.product(rhic_systems, (None, 3))
        )


if __name__ == "__main__":
    main()
